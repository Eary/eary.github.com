<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[云淡风轻]]></title>
  <subtitle><![CDATA[一个安静的角落]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://ioliu.cn/"/>
  <updated>2015-11-16T15:21:24.813Z</updated>
  <id>https://ioliu.cn/</id>
  
  <author>
    <name><![CDATA[Heroy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[常用Meta整理]]></title>
    <link href="https://ioliu.cn/2015/html-meta/"/>
    <id>https://ioliu.cn/2015/html-meta/</id>
    <published>2015-08-20T01:42:05.000Z</published>
    <updated>2015-11-16T15:21:24.813Z</updated>
    <content type="html"><![CDATA[<h2 id="概要">概要</h2><blockquote class="blockquote-center">标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。– <a href="http://www.w3school.com.cn/" target="_blank" rel="external">W3School</a>  </blockquote>

<h3 id="必要属性">必要属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>content</td>
<td>some text</td>
<td>定义与http-equiv或name属性相关的元信息</td>
</tr>
</tbody>
</table>
<h3 id="可选属性">可选属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>http-equiv</td>
<td>content-type / expire / refresh / set-cookie</td>
<td>把content属性关联到HTTP头部。</td>
</tr>
<tr>
<td>name</td>
<td>author / description / keywords / generator / revised / others</td>
<td>把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td>content</td>
<td>some text</td>
<td>定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="SEO优化">SEO优化</h2><p><a href="http://msdn.microsoft.com/zh-cn/library/ff724016" target="_blank" rel="external">参考文档</a>  </p>
<ul>
<li><strong><strong>页面关键词</strong></strong> , 每个网页应具有描述该网页内容的一组唯一的关键字。<br> 使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。<pre><code>&lt;meta <span class="property">name</span>=<span class="string">"keywords"</span> content=<span class="string">"your tags"</span> /&gt;
</code></pre></li>
<li><strong><strong>页面描述</strong></strong> , 每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。<pre><code>&lt;meta <span class="property">name</span>=<span class="string">"description"</span> content=<span class="string">"150 words"</span> /&gt;
</code></pre></li>
<li><strong><strong>搜索引擎索引方式</strong></strong> , robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"robots"</span> <span class="attribute">content</span>=<span class="value">"index,follow"</span> /&gt;</span>
<span class="comment">&lt;!--
    all：文件将被检索，且页面上的链接可以被查询；
    none：文件将不被检索，且页面上的链接不可以被查询；
    index：文件将被检索；
    follow：页面上的链接可以被查询；
    noindex：文件将不被检索；
    nofollow：页面上的链接不可以被查询。
 --&gt;</span>
</code></pre></li>
<li><strong><strong>页面重定向和刷新</strong></strong> : content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"refresh"</span> <span class="attribute">content</span>=<span class="value">"0;url="</span> /&gt;</span>
</code></pre></li>
<li><strong><strong>其他</strong></strong> <pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"author"</span> <span class="attribute">content</span>=<span class="value">"author name"</span> /&gt;</span> <span class="comment">&lt;!-- 定义网页作者 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"google"</span> <span class="attribute">content</span>=<span class="value">"index,follow"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"googlebot"</span> <span class="attribute">content</span>=<span class="value">"index,follow"</span> /&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"verify"</span> <span class="attribute">content</span>=<span class="value">"index,follow"</span> /&gt;</span> 
</code></pre></li>
</ul>
<h2 id="移动设备">移动设备</h2><ul>
<li><p><strong><strong>viewport</strong></strong> ：能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。<br> 大部分4.7-5寸设备的viewport宽设为360px；5.5寸设备设为400px；iphone6设为375px；ipone6 plus设为414px。</p>
<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no"</span>/&gt;</span>
<span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边  --&gt;</span>
</code></pre><ol>
<li>width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）</li>
<li>height：高度（数值 / device-height）（范围从223 到10,000）</li>
<li>initial-scale：初始的缩放比例 （范围从&gt;0 到10）</li>
<li>minimum-scale：允许用户缩放到的最小比例</li>
<li>maximum-scale：允许用户缩放到的最大比例</li>
<li>user-scalable：用户是否可以手动缩 (no,yes)</li>
<li><p><del>minimal-ui</del>：可以在页面加载时最小化上下状态栏。（已弃用）</p>
<p><strong><em>注意</em></strong>，很多人使用initial-scale=1到非响应式网站上，这会让网站以100%宽度渲染，用户需要手动移动页面或者缩放。如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。</p>
</li>
</ol>
</li>
<li><p><strong><strong>WebApp全屏模式</strong></strong> : 伪装app，离线应用。  </p>
<pre><code>&lt;meta <span class="property">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> content=<span class="string">"black-translucent"</span> /&gt;
</code></pre></li>
<li><p><strong><strong>添加到主屏后的标题</strong></strong> </p>
<pre><code>&lt;meta <span class="property">name</span>=<span class="string">"apple-mobile-web-app-title"</span> content=<span class="string">"标题"</span>&gt;
</code></pre></li>
<li><strong><strong>忽略数字自动识别为电话号码</strong></strong> <pre><code>&lt;meta content=<span class="string">"telephone=no"</span> <span class="property">name</span>=<span class="string">"format-detection"</span> /&gt; 
</code></pre></li>
<li><strong><strong>忽略识别邮箱</strong></strong><pre><code>&lt;meta content=<span class="string">"email=no"</span> <span class="property">name</span>=<span class="string">"format-detection"</span> /&gt;
</code></pre></li>
<li><strong><strong>添加智能 App 广告条 Smart App Banner</strong></strong> ：告诉浏览器这个网站对应的app，并在页面上显示下载banner(如下图)。<br> <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" target="_blank" rel="external">参考文档</a><pre><code>&lt;meta <span class="property">name</span>=<span class="string">"apple-itunes-app"</span> content=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;
</code></pre> <img src="http://sfault-image.b0.upaiyun.com/154/084/1540848150-548142a6d3188_articlex" alt="img"></li>
<li><strong><strong>其他</strong></strong><br> <a href="http://fex.baidu.com/blog/2014/10/html-head-tags" target="_blank" rel="external">参考文档</a><pre><code><span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"HandheldFriendly"</span> <span class="attribute">content</span>=<span class="value">"true"</span>&gt;</span>
<span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"MobileOptimized"</span> <span class="attribute">content</span>=<span class="value">"320"</span>&gt;</span>
<span class="comment">&lt;!-- uc强制竖屏 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"screen-orientation"</span> <span class="attribute">content</span>=<span class="value">"portrait"</span>&gt;</span>
<span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-orientation"</span> <span class="attribute">content</span>=<span class="value">"portrait"</span>&gt;</span>
<span class="comment">&lt;!-- UC强制全屏 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"full-screen"</span> <span class="attribute">content</span>=<span class="value">"yes"</span>&gt;</span>
<span class="comment">&lt;!-- QQ强制全屏 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-fullscreen"</span> <span class="attribute">content</span>=<span class="value">"true"</span>&gt;</span>
<span class="comment">&lt;!-- UC应用模式 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"browsermode"</span> <span class="attribute">content</span>=<span class="value">"application"</span>&gt;</span>
<span class="comment">&lt;!-- QQ应用模式 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-page-mode"</span> <span class="attribute">content</span>=<span class="value">"app"</span>&gt;</span>
<span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"msapplication-tap-highlight"</span> <span class="attribute">content</span>=<span class="value">"no"</span>&gt;</span>
</code></pre></li>
</ul>
<h2 id="网页相关">网页相关</h2><pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">'utf-8'</span> /&gt;</span>
</code></pre><ul>
<li><strong><strong>优先使用 IE 最新版本和 Chrome</strong></strong><pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge,chrome=1"</span> /&gt;</span>
<span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=6"</span> &gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=7"</span> &gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=8"</span> &gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span>
</code></pre></li>
<li><strong><strong>浏览器内核控制</strong></strong>：国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。<a href="http://se.360.cn/v6/help/meta.html" target="_blank" rel="external">参考文档</a><pre><code>&lt;meta <span class="property">name</span>=<span class="string">"renderer"</span> content=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;
</code></pre>  国内双核浏览器默认内核模式如下：<ol>
<li>搜狗高速浏览器、QQ浏览器：IE内核（兼容模式）</li>
<li>360极速浏览器、遨游浏览器：Webkit内核（极速模式）</li>
</ol>
</li>
<li><strong><strong>禁止浏览器从本地计算机的缓存中访问页面内容</strong></strong>：这样设定，访问者将无法脱机浏览。<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span>
</code></pre></li>
<li><strong><strong>Windows 8</strong></strong><pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"msapplication-TileColor"</span> <span class="attribute">content</span>=<span class="value">"#000"</span>/&gt;</span> <span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"msapplication-TileImage"</span> <span class="attribute">content</span>=<span class="value">"icon.png"</span>/&gt;</span> <span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span>
</code></pre></li>
<li><strong><strong>站点适配</strong></strong>：主要用于PC-手机页的对应关系。<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"mobile-agent"</span><span class="value">content="format=[wml|xhtml|html5];</span> <span class="attribute">url</span>=<span class="value">url"</span>&gt;</span>
<span class="comment">&lt;!--
[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；
url="url" 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。
--&gt;</span>
</code></pre></li>
<li><strong><strong>转码申明</strong></strong>：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta<pre><code><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Cache-Control"</span> <span class="attribute">content</span>=<span class="value">"no-siteapp"</span> /&gt;</span>
</code></pre></li>
</ul>
<h2 id="其他参考文档">其他参考文档</h2><ol>
<li><a href="http://code.lancepollard.com/complete-list-of-html-meta-tags/" target="_blank" rel="external">COMPLETE LIST OF HTML META TAGS</a> </li>
<li><a href="http://www.w3.org/TR/html5/document-metadata.html#the-meta-element" target="_blank" rel="external">W3C META TAGS</a></li>
<li><a href="http://www.html-5.com/metatags/" target="_blank" rel="external">METATAGES in HTML5</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta" target="_blank" rel="external">MDN META TAGS</a></li>
</ol>
<hr>
<blockquote>
<p>本文转载自SegmentFault,原文略有删改,侵权即删.<br>原文链接：<a href="http://segmentfault.com/a/1190000002407912" target="_blank" rel="external">常用meta整理</a><br>原文作者：<a href="http://segmentfault.com/u/ciaocc" target="_blank" rel="external">Ciaocc</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要">概要</h2><blockquote class="blockquote-center">标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。– <a href="http://www.w3school.com.cn/">W3School</a>  </blockquote>

<h3 id="必要属性">必要属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>content</td>
<td>some text</td>
<td>定义与http-equiv或name属性相关的元信息</td>
</tr>
</tbody>
</table>
<h3 id="可选属性">可选属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>http-equiv</td>
<td>content-type / expire / refresh / set-cookie</td>
<td>把content属性关联到HTTP头部。</td>
</tr>
<tr>
<td>name</td>
<td>author / description / keywords / generator / revised / others</td>
<td>把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td>content</td>
<td>some text</td>
<td>定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="html" scheme="https://ioliu.cn/tags/html/"/>
    
      <category term="meta" scheme="https://ioliu.cn/tags/meta/"/>
    
      <category term="前端" scheme="https://ioliu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="https://ioliu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[无题]]></title>
    <link href="https://ioliu.cn/2015/nothing/"/>
    <id>https://ioliu.cn/2015/nothing/</id>
    <published>2015-05-29T03:10:01.000Z</published>
    <updated>2015-11-16T15:21:24.813Z</updated>
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">这一路走过，如岁月的枯木碾碎后，加上时光的清水，成了一纸的澄明，不管曾经的颜色是什么，一泼墨，便能渲染出隔世离空的色彩……<br>可却，再也回不到最初。</blockquote><br><a id="more"></a><br><img src="https://dn-ioliu.qbox.me/sunset.jpg" alt="sun"> </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote class="blockquote-center">这一路走过，如岁月的枯木碾碎后，加上时光的清水，成了一纸的澄明，不管曾经的颜色是什么，一泼墨，便能渲染出隔世离空的色彩……<br>可却，再也回不到最初。</blockquote><br>]]>
    
    </summary>
    
      <category term="Nothing" scheme="https://ioliu.cn/tags/Nothing/"/>
    
      <category term="杂记" scheme="https://ioliu.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="杂记" scheme="https://ioliu.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端 JavaScript 规范]]></title>
    <link href="https://ioliu.cn/2015/the-front-end-javascript-specification/"/>
    <id>https://ioliu.cn/2015/the-front-end-javascript-specification/</id>
    <published>2015-05-12T04:53:34.000Z</published>
    <updated>2015-11-16T15:21:24.828Z</updated>
    <content type="html"><![CDATA[<h2 id="类型">类型</h2><p><strong>原始值</strong>:相当于传值(JavaScript对象都提供了字面量)，使用字面量创建对象。  </p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span>,</span><br><span class="line">    bar = foo;</span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line">console.<span class="built_in">log</span>(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>复杂类型</strong>:相当于传引用  </p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    bar = foo;</span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">console.<span class="built_in">log</span>(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>
<h2 id="对象">对象</h2><ol>
<li><p>使用<code>字面值</code>创建对象  </p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要使用保留字 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words" target="_blank" rel="external">reserved words</a> 作为键  </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span>:</span> <span class="symbol">'superher</span>o',</span><br><span class="line">  <span class="keyword">default</span>: &#123; clark: <span class="symbol">'ken</span>t' &#125;,</span><br><span class="line">  <span class="keyword">private</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  klass: <span class="symbol">'superher</span>o',</span><br><span class="line">  defaults: &#123; clark: <span class="symbol">'ken</span>t' &#125;,</span><br><span class="line">  hidden: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="数组">数组</h2><ol>
<li><p>使用<code>字面值</code>创建数组  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你不知道数组的长度，使用<code>push</code>  </p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>当你需要拷贝数组时使用<code>slice</code>  .  <a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="external">jsPerf</a>  </p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">var</span> len = <span class="keyword">items.length,</span><br><span class="line"></span>    <span class="keyword">itemsCopy </span>= [],</span><br><span class="line">    i<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// <span class="keyword">bad</span><br><span class="line"></span><span class="label">for</span> (i = <span class="number">0</span><span class="comment">; i &lt; len; i++) &#123;</span></span><br><span class="line">  <span class="keyword">itemsCopy[i] </span>= <span class="keyword">items[i];</span><br><span class="line"></span>&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">itemsCopy </span>= <span class="keyword">items.slice();</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>slice</code>将<code>类数组</code>的对象转成数组.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [].slice.apply(<span class="built_in">arguments</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="字符串">字符串</h2><ol>
<li><p>对字符串使用单引号 <code>&#39;&#39;</code>(因为大多时候我们的字符串。特别html会出现<code>&quot;</code>)</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</span><br></pre></td></tr></table></figure>
</li>
<li><p>超过80(也有规定140的，项目具体可制定)个字符的字符串应该使用字符串连接换行<br><strong><code>!!!</code></strong>: 如果过度使用，长字符串连接可能会对性能有影响. <a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">Discussion</a>  </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">var errorMessage = 'This is a super long error that was thrown because of Batman. When you <span class="operator"><span class="keyword">stop</span> <span class="keyword">to</span> think about how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere <span class="keyword">fast</span>.<span class="string">';</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">var errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that \</span><br><span class="line">was thrown because <span class="keyword">of</span> Batman. \</span><br><span class="line"><span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about \</span><br><span class="line">how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> \</span><br><span class="line"><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere \</span><br><span class="line"><span class="keyword">fast</span>.<span class="string">';</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">var errorMessage = '</span>This <span class="keyword">is</span> a super <span class="keyword">long</span> <span class="keyword">error</span> that <span class="string">' +</span><br><span class="line">  '</span>was thrown because <span class="keyword">of</span> Batman.<span class="string">' +</span><br><span class="line">  '</span><span class="keyword">When</span> you <span class="keyword">stop</span> <span class="keyword">to</span> think about <span class="string">' +</span><br><span class="line">  '</span>how Batman had anything <span class="keyword">to</span> <span class="keyword">do</span> <span class="string">' +</span><br><span class="line">  '</span><span class="keyword">with</span> this, you would <span class="keyword">get</span> nowhere <span class="string">' +</span><br><span class="line">  '</span><span class="keyword">fast</span>.<span class="string">';</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编程时使用<code>join</code>而不是字符串连接来构建字符串，特别是IE: <a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a>.</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var items,</span><br><span class="line">    messages,</span><br><span class="line">    <span class="built_in">length</span>, i;</span><br><span class="line"></span><br><span class="line">messages = <span class="matrix">[&#123;</span><br><span class="line">    state: <span class="string">'success'</span>,</span><br><span class="line">    message: <span class="string">'This one worked.'</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    state: <span class="string">'success'</span>,</span><br><span class="line">    message: <span class="string">'This one worked as well.'</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    state: <span class="string">'error'</span>,</span><br><span class="line">    message: <span class="string">'This one did not work.'</span></span><br><span class="line">&#125;]</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">length</span> = <span class="transposed_variable">messages.</span><span class="built_in">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> &#123;</span></span><br><span class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages<span class="matrix">[i].</span>message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> &#123;</span></span><br><span class="line">  items = <span class="matrix">[]</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    items<span class="matrix">[i]</span> = messages<span class="matrix">[i].</span>message;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;&lt;li&gt;'</span> + <span class="transposed_variable">items.</span>join(<span class="string">'&lt;/li&gt;&lt;li&gt;'</span>) + <span class="string">'&lt;/li&gt;&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="函数">函数</h2><ol>
<li><p>函数表达式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即调用函数表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同。</p>
</li>
<li><p><strong><code>注</code></strong>: ECMA-262定义把<code>块</code>定义为一组语句，函数声明不是一个语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">阅读ECMA-262对这个问题的说明</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对不要把参数命名为 <code>arguments</code>, 这将会逾越函数作用域内传过来的 <code>arguments</code> 对象.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span><span class="params">(name, options, arguments)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span><span class="params">(name, options, args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="属性">属性</h2><ol>
<li>当使用变量和特殊非法变量名时，访问属性时可以使用中括号(<code>.</code> 优先).<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span><span class="params">(prop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="变量">变量</h2><ol>
<li><p>总是使用 <code>var</code> 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个 <code>var</code> 以及新行声明多个变量，缩进4个空格。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> items</span> = getItems();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> goSportsTeam</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> dragonball</span> = 'z';</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> items</span> = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = 'z';</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后再声明未赋值的变量，当你想引用之前已赋值变量的时候很有用。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> i, len, dragonball,</span><br><span class="line">    items</span> = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> i, items</span> = getItems(),</span><br><span class="line">    dragonball,</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> items</span> = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball,</span><br><span class="line">    length,</span><br><span class="line">    i;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在作用域顶部声明变量，避免变量声明和赋值引起的相关问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="条件表达式和等号">条件表达式和等号</h2><ol>
<li>合理使用 <code>===</code> 和 <code>!==</code> 以及 <code>==</code> 和 <code>!=</code>.</li>
<li>合理使用表达式逻辑操作运算.</li>
<li><p>条件表达式的强制类型转换遵循以下规则：</p>
<ul>
<li><code>对象</code> 被计算为 <code>true</code></li>
<li><code>Undefined</code> 被计算为 <code>false</code></li>
<li><code>Null</code> 被计算为 <code>false</code></li>
<li><code>布尔值</code> 被计算为 <code>布尔的值</code></li>
<li><code>数字</code> 如果是 <code>+0</code>, <code>-0</code>, or <code>NaN</code> 被计算为 <code>false</code> , 否则为 <code>true</code></li>
<li><code>字符串</code> 如果是空字符串 <code>&#39;&#39;</code> 则被计算为 <code>false</code>, 否则为 <code>true</code><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if<span class="function"> (</span><span class="keyword">[</span>0]<span class="function">)</span> &#123;</span><br><span class="line">  // true</span><br><span class="line">  // An<span class="instruction"> array </span>is an object, objects evaluate to true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用快捷方式.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="tag">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="tag">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="tag">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="tag">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>阅读 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth Equality and JavaScript</a> 了解更多</p>
</li>
</ol>
<h2 id="块">块</h2><ol>
<li>给所有多行的块使用大括号<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="注释">注释</h2><ol>
<li><p>使用 <code>/** ... */</code> 进行多行注释，包括描述，指定类型以及参数值和返回值</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &lt;String&gt; tag</span></span><br><span class="line"><span class="comment">// @return &lt;Element&gt; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(tag)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * make() returns a new element</span><br><span class="line"> * based on the passed in tag name</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> &lt;String&gt; tag</span><br><span class="line"> * <span class="doctag">@return</span> &lt;Element&gt; element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(tag)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>//</code> 进行单行注释，在评论对象的上面进行单行注释，注释前放一个空行.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">function getType() &#123;</span><br><span class="line">  console.log(<span class="symbol">'fetching</span> <span class="class"><span class="keyword">type</span>...');</span></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> <span class="class"><span class="keyword">type</span> =</span> <span class="keyword">this</span>._type || <span class="symbol">'no</span> <span class="class"><span class="keyword">type</span>';</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">type</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">function getType() &#123;</span><br><span class="line">  console.log(<span class="symbol">'fetching</span> <span class="class"><span class="keyword">type</span>...');</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> <span class="class"><span class="keyword">type</span> =</span> <span class="keyword">this</span>._type || <span class="symbol">'no</span> <span class="class"><span class="keyword">type</span>';</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">type</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你有一个问题需要重新来看一下或如果你建议一个需要被实现的解决方法的话需要在你的注释前面加上 <code>FIXME</code> 或 <code>TODO</code> 帮助其他人迅速理解</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">  total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>满足规范的文档，在需要文档的时候，可以尝试<a href="http://usejsdoc.org/" target="_blank" rel="external">jsdoc</a>.</p>
</li>
</ol>
<h2 id="空白">空白</h2><ol>
<li>缩进、格式化能帮助团队更快得定位修复代码BUG.</li>
<li><p>将tab设为4个空格</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>大括号前放一个空格</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  console.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  console.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.<span class="keyword">set</span>(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.<span class="keyword">set</span>(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在做长方法链时使用缩进.</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).<span class="keyword">find</span>(<span class="string">'.selected'</span>).highlight().end().<span class="keyword">find</span>(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .<span class="keyword">find</span>(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .<span class="keyword">find</span>(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">var leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().<span class="keyword">append</span>(<span class="string">'svg:svg'</span>).<span class="keyword">class</span>(<span class="string">'led'</span>, <span class="keyword">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>).<span class="keyword">append</span>(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .<span class="keyword">call</span>(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">var leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().<span class="keyword">append</span>(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .<span class="keyword">class</span>(<span class="string">'led'</span>, <span class="keyword">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .<span class="keyword">append</span>(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .<span class="keyword">call</span>(tron.led);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="逗号">逗号</h2><ol>
<li><p>不要将逗号放前面</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> once,</span><br><span class="line">    upon,</span><br><span class="line">    aTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Bob'</span></span><br><span class="line">  , lastName: <span class="string">'Parr'</span></span><br><span class="line">  , heroName: <span class="string">'Mr. Incredible'</span></span><br><span class="line">  , superPower: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Bob'</span>,</span><br><span class="line">  lastName: <span class="string">'Parr'</span>,</span><br><span class="line">  heroName: <span class="string">'Mr. Incredible'</span>,</span><br><span class="line">  superPower: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要加多余的逗号，这可能会在IE下引起错误，同时如果多一个逗号某些ES3的实现会计算多数组的长度。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="分号">分号</h2><ol>
<li>语句结束一定要加分号<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="类型转换">类型转换</h2><ol>
<li>在语句的开始执行类型转换.</li>
<li><p>字符串:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对数字使用 <code>parseInt</code> 并且总是带上类型转换的基数.，如<code>parseInt(value, 10)</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> inputValue</span> = '<span class="number">4</span>';</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = new Number(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = parseInt(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = Number(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = parseInt(inputValue, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * parseInt was the reason my code was slow.</span><br><span class="line"> * Bitshifting the String to coerce it to a</span><br><span class="line"> * Number made it a lot faster.</span><br><span class="line"> */</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> <span class="keyword">val</span></span> = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔值:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> hasAge</span> = new <span class="typename">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> hasAge</span> = <span class="typename">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> hasAge</span> = !!age;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="命名约定">命名约定</h2><ol>
<li><p>避免单个字符名，让你的变量名有描述意义。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当命名对象、函数和实例时使用驼峰命名规则</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">this</span>-<span class="keyword">is</span>-my-object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'Bob Parr'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'Bob Parr'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>当命名构造函数或类时使用驼峰式大写</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">(options)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(options)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>命名私有属性时前面加个下划线 <code>_</code></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当保存对 <code>this</code> 的引用时使用 <code>self(python 风格)</code>,避免<code>this issue</code> . Angular建议使用<code>vm(MVVM模式中view-model)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="存取器">存取器</h2><ol>
<li>属性的存取器函数不是必需的</li>
<li>如果你确实有存取器函数的话使用<code>getVal()</code> 和 <code>setVal(‘hello’)</code>,<code>java getter、setter风格</code>或者<code>jQuery风格</code></li>
<li><p>如果属性是布尔值，使用<code>isVal()</code> 或 <code>hasVal()</code></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以创建<code>get()</code>和<code>set()</code>函数，但是要保持一致</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span><span class="params">(options)</span> </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.<span class="keyword">set</span> = <span class="function"><span class="keyword">function</span><span class="params">(key, val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>[key] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.<span class="keyword">get</span> = <span class="function"><span class="keyword">function</span><span class="params">(key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="构造器">构造器</h2><ol>
<li><p>给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype = &#123;</span><br><span class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法可以返回 <code>this</code> 帮助方法可链。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span><span class="params">(height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>) <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span><span class="params">(height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以写一个自定义的<code>toString()</code>方法，但是确保它工作正常并且不会有副作用。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span><span class="params">(options)</span> </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="事件">事件</h2><ol>
<li>当给事件附加数据时，传入一个哈希而不是原始值，这可以让后面的贡献者加入更多数据到事件数据里而不用找出并更新那个事件的事件处理器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; listingId : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="模块">模块</h2><ol>
<li>这个文件应该以驼峰命名，并在同名文件夹下，同时导出的时候名字一致</li>
<li>对于公开API库可以考虑加入一个名为noConflict()的方法来设置导出的模块为之前的版本并返回它</li>
<li>总是在模块顶部声明 <code>&#39;use strict&#39;;</code>，引入<a href="http://jshint.com/" target="_blank" rel="external">JSHint规范</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fancyInput/fancyInput.js</span></span><br><span class="line"></span><br><span class="line">（<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line"><span class="pi">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    global.FancyInput = previousFancyInput;</span><br><span class="line">    <span class="keyword">return</span> FancyInput;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.FancyInput = FancyInput;</span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="jQuery">jQuery</h2><ol>
<li><p>对于jQuery对象以<code>$</code>开头，以和原生DOM节点区分。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> menu = $(<span class="string">".menu"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $menu = $(<span class="string">".menu"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存jQuery查询</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="keyword">function</span> setSidebar() &#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  // ...stuff...</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">function</span> setSidebar() &#123;</span><br><span class="line">  var <span class="variable">$sidebar</span> = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  <span class="variable">$sidebar</span>.hide();</span><br><span class="line"></span><br><span class="line">  // ...stuff...</span><br><span class="line"></span><br><span class="line">  <span class="variable">$sidebar</span>.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对DOM查询使用级联的 <code>$(&#39;.sidebar ul&#39;)</code> 或 <code>$(&#39;.sidebar ul&#39;)</code>，<a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a> </p>
</li>
<li><p>对有作用域的jQuery对象查询使用 <code>find</code></p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable">$(</span><span class="string">'.sidebar'</span>, <span class="string">'ul'</span>).<span class="keyword">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable">$(</span><span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).<span class="keyword">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable">$(</span><span class="string">'.sidebar ul'</span>).<span class="keyword">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable">$(</span><span class="string">'.sidebar &gt; ul'</span>).<span class="keyword">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (slower)</span></span><br><span class="line"><span class="variable">$sidebar</span>.find(<span class="string">'ul'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (faster)</span></span><br><span class="line"><span class="variable">$(</span><span class="variable">$sidebar</span>[<span class="number">0</span>]).find(<span class="string">'ul'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>每个页面只使用一次document的ready事件，这样便于调试与行为流跟踪。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//do your page init.  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件利用<code>jQuery.on</code>从页面分离到JavaScript文件。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">&lt;<span class="literal">a</span> id=<span class="string">"myLink"</span> href=<span class="string">"#"</span> onclick=<span class="string">"myEventHandler();"</span>&gt;&lt;/<span class="literal">a</span>&gt;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">&lt;<span class="literal">a</span> id=<span class="string">"myLink"</span> href=<span class="string">"#"</span>&gt;&lt;/<span class="literal">a</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, myEventHandler)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于Ajax使用<code>promise</code>方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;.</span><br><span class="line">    ..</span><br><span class="line">&#125;).then( <span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用<code>promise</code>的<code>deferred对象</code>解决延迟注册问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 新建一个deferred对象</span></span><br><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line">        dtd.resolve(); <span class="comment">// 改变deferred对象的执行状态</span></span><br><span class="line">    &#125;;</span><br><span class="line">    setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line">　　<span class="keyword">return</span> dtd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTML中Style、以及JavaScript中style移到CSS中class，在HTML、JavaScript中引入class，而不是直接style。</p>
</li>
</ol>
<h2 id="ECMAScript_5兼容性">ECMAScript 5兼容性</h2><p>尽量采用ES5方法，特别数组<code>map</code>、<code>filter</code>、<code>forEach</code>方法简化日常开发。在老式IE浏览器中引入<code>ES5-shim</code>。或者也可以考虑引入<code>underscore</code>、<code>lodash</code> 常用辅助库. </p>
<ul>
<li>参考<a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a>的 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="external">ES5 compatibility table</a></li>
</ul>
<h2 id="HTML、CSS、JavaScript分离">HTML、CSS、JavaScript分离</h2><ol>
<li>页面DOM结构使用HTML，样式则采用CSS，动态DOM操作JavaScript。不要混用在HTML中<br>分离在不同类型文件，文件link。</li>
<li>HTML、CSS、JavaScript变量名都需要有业务价值。CSS以中划线分割的全小写命名，JavaScript则首字母小写的驼峰命名。</li>
<li>CSS可引入Bootstrap、Foundation等出名响应式设计框架。以及SASS、LESS工具书写CSS。</li>
<li>对于CSS、JavaScript建议合并为单文件，减少Ajax的连接数。也可以引入AMD(Require.js)加载方式。</li>
<li>对于内部大部分企业管理系统，可以尝试采用前端 MVC框架组织代码。如Angular、React + flux架构、Knockout等。</li>
<li>对于兼容性可用<a href="http://modernizr.com/" target="_blank" rel="external">Modernizr</a>规范库辅助。</li>
</ol>
<h2 id="使用jsHint">使用jsHint</h2><ol>
<li>前端项目中推荐引入 <a href="http://jshint.com/" target="_blank" rel="external">jshint</a>插件来规范项目编码规范。以及一套完善的IDE配置。</li>
<li>注意：jshint需要引入nodejs 工具grunt或gulp插件，建议企业级nodejs npm私服。</li>
</ol>
<h2 id="前端工具">前端工具</h2><ol>
<li>前端第三方JavaScript包管理工具bower(<code>bower install jQuery</code>)，bower可以实现第三方库的依赖解析、下载、升级管理等。建议建立企业级bower私服。</li>
<li>前端构建工具，可以采用grunt或者gulp工具，可以实现html、css、js压缩、验证、测试，文件合并、watch和liveload等所有前端任务。建议企业级nodejs npm私服。</li>
<li>前端开发IDE： WebStorm( Idea )、Sublime为最佳 。项目组统一IDE。IDE统一配置很重要。</li>
</ol>
<blockquote>
<p>本文转载自<a href="http://greengerong.github.io/blog/2015/05/09/qian-duan-javascriptgui-fan/" target="_blank" rel="external">破狼</a>,原文略有修改,侵权即删.<br>原文链接：<a href="http://greengerong.github.io/blog/2015/05/09/qian-duan-javascriptgui-fan/" target="_blank" rel="external">前端javascript规范</a><br>原文作者：<a href="http://greengerong.github.io/" target="_blank" rel="external">破狼</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="类型">类型</h2><p><strong>原始值</strong>:相当于传值(JavaScript对象都提供了字面量)，使用字面量创建对象。  </p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span>,</span><br><span class="line">    bar = foo;</span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line">console.<span class="built_in">log</span>(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="https://ioliu.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://ioliu.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="规范" scheme="https://ioliu.cn/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="前端" scheme="https://ioliu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你可能不知道的一些JavaScript 奇技淫巧]]></title>
    <link href="https://ioliu.cn/2015/about-javascript-spcial-technique/"/>
    <id>https://ioliu.cn/2015/about-javascript-spcial-technique/</id>
    <published>2015-05-07T02:21:08.000Z</published>
    <updated>2015-11-16T15:21:24.797Z</updated>
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">这里记录一下以前学习各种书籍和文章里边出现的JS的小技巧，分享给大家，也供自己查阅，同时感谢那些发现创造和分享这些技巧的前辈和大牛们。</blockquote></p>
<h2 id="遍历一个obj的属性到数组">遍历一个obj的属性到数组</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">(obj)</span><span class="comment">&#123;</span><br><span class="line">     var a=[];</span><br><span class="line">     for(a[a.length] in obj);</span><br><span class="line">     return a;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="title">console</span>.<span class="title">log</span><span class="params">(getAttr(&#123;<span class="string">'name'</span>:<span class="string">'zhangsan'</span>,<span class="string">'age'</span>:<span class="string">'20'</span>&#125;)</span>);</span><span class="comment">//输出:['name','age']</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>乍一看可能比较蒙，不过仔细分析还是不难理解的。常见用法是<code>for(var key in obj)</code>，这里<code>key</code>初始也是<code>undefined</code>的，<code>a[a.length]</code>整体也是<code>undefined</code>，所以二者其实是等价的。<br>在<code>for</code>循环中，<code>obj</code>的属性会依次赋值给<code>key</code>，同样，也依次赋值给<code>a[a.length]</code>，这里<code>length</code>一直在变，就巧妙地挨个赋值给数组的每一个元素了。</p>
<h2 id="重复字符串(如abc=&gt;abcabc)">重复字符串(如<code>abc=&gt;abcabc</code>)</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">repeat</span>(<span class="type">target</span>,n)&#123;</span><br><span class="line">    <span class="keyword">return</span> (new Array(n+<span class="number">1</span>).join(<span class="type">target</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改进版本:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">repeat</span>(<span class="type">target</span>,n)&#123;</span><br><span class="line">	<span class="keyword">return</span> Array.prototype.join.<span class="keyword">call</span>(&#123;length:n+<span class="number">1</span>&#125;,<span class="type">target</span>);</span><br><span class="line">	//之所以要创建带length属性的对象，是因为调用数组原型方法时，必须是一个类数组对象，而类数组对象的条件就是length为非负整数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不新建数组，而是用拥有<code>length</code>属性的对象替代，然后调用数组的<code>join</code>方法,性能提升很大.<br>再改进：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">repeat</span>=(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">	var join=Array.prototype.join,obj=&#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(target,n)</span></span>&#123;</span><br><span class="line">		obj.length=n+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> join.<span class="keyword">call</span>(obj,<span class="type">target</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>利用闭包将<code>对象</code>和<code>join</code>方法缓存起来，不用每次都新建对象和寻找方法  </p>
<h2 id="for循环">for循环</h2><p>for循环中，当第二项为false时会终止循环，这里并不一定存在比较，可以直接赋值，如果赋值为undefined之类的值时，转成bool值也为假，因此也会终止，比如遍历数组可以写成：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i=arr.<span class="built_in">length</span>,<span class="keyword">element</span>;<span class="keyword">element</span>=arr[—-i];)&#123;…&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里，第二项一定是<code>arr[--i]</code>而非<code>arr[i--]</code>,如果是后者的话，上来就是<code>undefined</code>，就不会执行循环体，或者<code>for(var i=0,element;element=arr[i++];){…}</code></p>
<h2 id="NaN">NaN</h2><p><code>NaN</code>是JS中唯一不等于自己的值，因此可以用来判断一个变量是否真的为<code>NaN</code>:<code>a!==a</code></p>
<h2 id="/、+等算术运算符"><code>/</code>、<code>+</code>等算术运算符</h2><p><code>&lt;</code>/<code>+</code>等运算符会强制符号两边的表达式执行valueOf然后比较，所以如果两边是函数或者对象，而又重写了该对象的valueOf方法，就会自动执行两边的方法。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;valueOf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"aaa"</span>);&#125;&#125;,b=&#123;valueOf:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"bbb"</span>);&#125;&#125;;</span><br><span class="line">    a &lt; b;<span class="comment">//会输出:aaa;bbb;false</span></span><br></pre></td></tr></table></figure></p>
<h2 id="闭包">闭包</h2><p>理解闭包需学会三个基本事实：  </p>
<ol>
<li>JS允许你引用在当前函数意外定义的变量  </li>
<li>即使外部函数已经返回，当前函数仍然可以引用在外部函数所定义的变量。这是因为JS的函数值包含里比调用它们时执行所需要的代码更多的信息  </li>
<li>闭包可以更新外部变量的值。这是因为闭包存储的是外部变量的引用而非值副本。如：<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> val=<span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="keyword">set</span>:<span class="function"><span class="keyword">function</span><span class="params">(x)</span></span>&#123;val=x;&#125;,</span><br><span class="line">		<span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> val;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b=box();</span><br><span class="line">b.<span class="keyword">get</span>();<span class="comment">//“undefined”</span></span><br><span class="line">b.<span class="keyword">set</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="keyword">get</span>();<span class="comment">//5</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这一点很重要，比如在函数的for循环体内返回闭包或者有闭包取for循环的计数器值，那么这个闭包取到的永远是for循环结束时i的最终值，因为闭包存储的是它的引用而非当时的值副本。</p>
<h2 id="块级作用域">块级作用域</h2><p>JS没有块级作用域，因此通常情况下函数内部的所有变量都是绑定到函数作用域的，也就是说相当于都在函数一开始就声明了的，一个例外就是<code>try/catch</code>中的变量是块级的，只属于<code>try/catch</code>块。</p>
<h2 id="嵌套函数">嵌套函数</h2><p>众所周知，在函数内部声明函数是可以的，但是在在函数内的局部块里声明，可能会出现问题：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;<span class="keyword">return</span> “global”;&#125;</span><br><span class="line">function test(x)&#123;</span><br><span class="line">     function f()&#123;<span class="keyword">return</span> “local”&#125;</span><br><span class="line">     <span class="keyword">var</span> <span class="literal">result</span>=[];</span><br><span class="line">     <span class="keyword">if</span>(x)&#123;</span><br><span class="line">          <span class="literal">result</span>.push(f());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="literal">result</span>.push(f());</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">true</span>);//[“local”,”local”]</span><br><span class="line">test(<span class="literal">false</span>);//[“local”]</span><br></pre></td></tr></table></figure></p>
<p>将函数声明到if块中：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;<span class="keyword">return</span> “global”;&#125;</span><br><span class="line">function test(x)&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="literal">result</span>=[];</span><br><span class="line">     <span class="keyword">if</span>(x)&#123;</span><br><span class="line">          function f()&#123;<span class="keyword">return</span> “local”&#125;</span><br><span class="line">          <span class="literal">result</span>.push(f());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="literal">result</span>.push(f());</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125; </span><br><span class="line">test(<span class="literal">true</span>);//?</span><br><span class="line">test(<span class="literal">false</span>);//?</span><br></pre></td></tr></table></figure></p>
<p>结果会如何呢？理论上讲，JS没有块级作用域，因此f()的作用域是整个test函数，因此合理猜测应该是与上一次输出相同，全部为”local”，可是并不是所有的JS执行环境都如此行事，有的会根据是否执行包含f的代码块来有条件地绑定函数f（绑定即意味着将该变量绑定到其最近的作用域，而赋值是发生在代码实际执行到赋值那一步的时候进行的）。<br>因此最好的办法是如果要声明嵌套函数，都在其富函数的最外层声明，要么就不要声明函数，而是使用var声明和函数表达式来实现：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;<span class="keyword">return</span> “global”;&#125;</span><br><span class="line">function test(x)&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="literal">result</span>=[];</span><br><span class="line">     <span class="keyword">if</span>(x)&#123;</span><br><span class="line">          <span class="keyword">var</span> g=function()&#123;<span class="keyword">return</span> “local”&#125;</span><br><span class="line">          <span class="literal">result</span>.push(g());</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="literal">result</span>.push(f());</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="hasOwnProperty-NaN">hasOwnProperty</h2><p>用js创建字典的时候，如果是利用对象的方式（因为JS对象的核心是一个字符串属性名称和属性值的映射表），会遇到一个问题就是原型污染，因为获取字典属性值的时候用<code>hasOwnProperty</code>还好，如果用<code>for in</code>遍历的话，不仅会遍历对象本身，包括它的原型，因此如果在其他地方污染了Object的原型，那么<code>for in</code>就会产生非预期的结果，这时可能会用<code>hasOwnProperty</code>来先检测该对象本身是否含有属性来避免原型污染，然而更极端的情况是连<code>hasOwnProperty</code>这个原型方法都有可能被污染。<br>避免原型污染的方法是在创建字典对象的时候用<code>Object.create(null)</code>来创建一个完全空对象，这个对象没有原型，这个方法是<code>ES5</code>的,在没有这个方法可用的时候，最好是创建字典类，然后在字典类里用数组来存储有序集合，自己维护这个集合。  </p>
<h2 id="类数组对象">类数组对象</h2><p>JS中的类数组对象可以享用数组的大部分原型方法如<code>map</code>等<br>类数组对象是指满足两个条件的对象：<br>    一是具备合理范围值内的length属性<br>    二是length属性大于该对象的最大索引，索引是一个合理范围的证书，它的字符串表示的是对象的一个key；<br>但是数组的一个原型方法<code>contact</code>是不能被类数组对象调用的，因此需要先用<code>[].slice.call</code>把类数组对象转换为真正的数组比如<code>[].slice.call(arguments)</code>。  </p>
<h2 id="结构类型">结构类型</h2><p>并不是所有时候都需要继承，继承也不是完美的，有时候会创造比他能解决的更多的问题，特别是当层次关系没那么明显的时候，这时候应该多用<code>结构类型</code>(又叫<code>鸭子类型</code>，如果它看起来像鸭子、游泳像鸭子并且叫声像鸭子，那么它就是鸭子)，用结构类型设计灵活的对象接口的时候，不需要创建类工厂来返回类的实例，而是直接返回对象，对象具备预期的方法和属性，比如：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SomeObj</span>.someWidget=function(opts)&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          a:blabla,</span><br><span class="line">          b:function()<span class="decorator">&#123;...&#125;</span>,</span><br><span class="line">          c:blabla</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript_自动插入分号">JavaScript 自动插入分号</h2><p>JavaScript 具备自动插入分号的能力，但是自动插入分号并不是万能的，其有三条规则：</p>
<ol>
<li><h4 id="只在}标记之前、一个或多个换行之后以及程序输入的结尾被插入">只在<code>}</code>标记之前、一个或多个换行之后以及程序输入的结尾被插入</h4></li>
<li><h4 id="分号只在随后的输入标记不能被解析时插入">分号只在随后的输入标记不能被解析时插入</h4><blockquote>
<p>!!这一点很重要,比如:<br> a = b<br> (fn());<br> 是不会在<code>a=b</code>之后自动插入分号的，因为<code>a=b(f())</code>是可以被解析的，因此像<code>(</code>,<code>[</code>,<code>+</code>,<code>-</code>,<code>/</code>开头的时候，需要特别注意上一行可能不会自动插入。<br> 还有一些情况，尽管不会出现解析错误，JS仍然会强制插入分号，这就是所谓的JS语法限制产生式。它不允许在两个字符间出现换行，最危险的就是<code>return</code>语句，如<br> return<br>{};<br>  会被强制插入而成为<br>  return;<br>{};<br>  类似的还有：<code>throw语句</code>、带有显示标签的<code>break</code>或着<code>continue</code>语句、后置自增或自减运算符</p>
</blockquote>
</li>
<li><h4 id="分号不会作为分隔符在for循环空语句的头部被自动插入">分号不会作为分隔符在for循环空语句的头部被自动插入</h4>因此，最好的办法是在自己的js文件的最开始防御性地插入<code>;</code>，这样在合并js文件的时候就不会出问题了。  </li>
</ol>
<blockquote>
<p>本文转载自博客园,原文略有删减,侵权即删.<br>原文链接：<a href="http://www.cnblogs.com/dson/p/4415278.html" target="_blank" rel="external">你可能不知道的一些JavaScript 奇技淫巧</a><br>原文作者：<a href="http://www.cnblogs.com/dson/" target="_blank" rel="external">FirstLovt</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><blockquote class="blockquote-center">这里记录一下以前学习各种书籍和文章里边出现的JS的小技巧，分享给大家，也供自己查阅，同时感谢那些发现创造和分享这些技巧的前辈和大牛们。</blockquote></p>
<h2 id="遍历一个obj的属性到数组">遍历一个obj的属性到数组</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">(obj)</span><span class="comment">&#123;</span><br><span class="line">     var a=[];</span><br><span class="line">     for(a[a.length] in obj);</span><br><span class="line">     return a;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="title">console</span>.<span class="title">log</span><span class="params">(getAttr(&#123;<span class="string">'name'</span>:<span class="string">'zhangsan'</span>,<span class="string">'age'</span>:<span class="string">'20'</span>&#125;)</span>);</span><span class="comment">//输出:['name','age']</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="https://ioliu.cn/tags/JavaScript/"/>
    
      <category term="JavaScript技巧" scheme="https://ioliu.cn/tags/JavaScript%E6%8A%80%E5%B7%A7/"/>
    
      <category term="数组遍历" scheme="https://ioliu.cn/tags/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/"/>
    
      <category term="结构类型" scheme="https://ioliu.cn/tags/%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="前端" scheme="https://ioliu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World for Hexo]]></title>
    <link href="https://ioliu.cn/2015/hexo-your-blog/"/>
    <id>https://ioliu.cn/2015/hexo-your-blog/</id>
    <published>2015-05-06T02:21:08.000Z</published>
    <updated>2015-11-16T15:21:24.813Z</updated>
    <content type="html"><![CDATA[<p><img src="//dn-ioliu.qbox.me/iohexo.io.png" alt="hexo">  </p>
<p>今天把博客移到了<code>Hexo</code>,感觉蛮不错的 ^_^ .<br><a id="more"></a></p>
<h2 id="简介">简介</h2><p><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">hexo</a> 是一款基于Node.js的静态博客框架。目前在GitHub上已有4k+ star 和 700+ fork (<a href="http://hexo.io/" target="_blank" rel="external">官网</a>)。<br>是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="特性">特性</h2><ul>
<li>风一般的速度:<br><code>Hexo</code>基于<code>Node.js</code>，支持多进程，几百篇文章也可以秒生成。</li>
<li>流畅的撰写:<br>支持<code>GitHub Flavored Markdown</code>和所有<code>Octopress</code>的<a href="http://hexo.io/plugins/" target="_blank" rel="external">插件</a>。</li>
<li>扩展性:<br><code>Hexo</code>支持<code>EJS</code>、<code>Swig</code>和<code>Stylus</code>。通过插件支持<code>Haml</code>、<code>Jade</code>和<code>Less</code>.</li>
</ul>
<h2 id="快速入门">快速入门</h2><h3 id="安装">安装</h3><p>安装 <code>Hexo</code> 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：  </p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a> </li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span></span><br></pre></td></tr></table></figure></p>
<p>仅需一步就把 Hexo 本体和所有相依套件安装完毕，很简单吧？</p>
<h3 id="升级">升级</h3><p>更新hexo到最新版<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">update</span> hexo -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="初始化">初始化</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="tag">&lt;<span class="title">folder</span>&gt;</span></span><br><span class="line">cd <span class="tag">&lt;<span class="title">floder</span>&gt;</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>如果指定 <code>&lt;folder&gt;</code>，便会在目前的资料夹建立一个名为 <code>&lt;folder&gt;</code> 的新文件夹；否则会在目前文件夹初始化。</p>
<h3 id="新建">新建</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">[layout]</span> &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。  </p>
<h3 id="生成静态文件">生成静态文件</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line"><span class="comment">//或者 hexo generate</span></span><br></pre></td></tr></table></figure>
<h3 id="启动服务">启动服务</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="literal">s</span></span><br><span class="line"><span class="comment">//或者 hexo server</span></span><br></pre></td></tr></table></figure>
<p>启动服务后,打开浏览器输入 <code>http://localhost:4000</code> 回车,即可看到效果.</p>
<blockquote>
<p>Hexo官网：[<a href="http://hexo.io" target="_blank" rel="external">http://Hexo.io</a>]  </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="//dn-ioliu.qbox.me/iohexo.io.png" alt="hexo">  </p>
<p>今天把博客移到了<code>Hexo</code>,感觉蛮不错的 ^_^ .<br>]]>
    
    </summary>
    
      <category term="HelloWorld" scheme="https://ioliu.cn/tags/HelloWorld/"/>
    
      <category term="Hexo" scheme="https://ioliu.cn/tags/Hexo/"/>
    
      <category term="免费博客" scheme="https://ioliu.cn/tags/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://ioliu.cn/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 ByClassName 在IE中的兼容性问题]]></title>
    <link href="https://ioliu.cn/2014/solve-question-for-getElementsByClassName-on-ie/"/>
    <id>https://ioliu.cn/2014/solve-question-for-getElementsByClassName-on-ie/</id>
    <published>2014-05-22T06:19:18.000Z</published>
    <updated>2015-11-16T15:21:24.828Z</updated>
    <content type="html"><![CDATA[<p>最近遇到一个<code>document.getElementsByClassName</code>在IE中的兼容性问题，有兼容性问题的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> checkInput = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"check"</span>);</span><br><span class="line">    alert(checkInput.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在IE的低版本中会出现如图所示的问题：<br><img src="//dn-ioliu.qbox.me/error-for-getElementsByClassName.jpg" alt="error"><br>参考了网上的一些代码与视频，解决代码如下：  </p>
<pre><code><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementsByClassName){
        <span class="built_in">document</span>.getElementsByClassName = <span class="function"><span class="keyword">function</span> (<span class="params">cls</span>)</span>{
            <span class="keyword">var</span> ret = [];
            <span class="keyword">var</span> els = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);
            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; els.length; i++){
                <span class="keyword">if</span>(els[i].className === cls 
                   || els[i].className.indexOf(cls + <span class="string">' '</span>) &gt; -<span class="number">1</span> 
                   || els[i].className.indexOf(<span class="string">' '</span> + cls + <span class="string">' '</span>) &gt; -<span class="number">1</span> 
                   || els[i].className.indexOf(<span class="string">' '</span> + cls) &gt; -<span class="number">1</span>){
                   ret.push(els[i]);
                }    
            }
            <span class="keyword">return</span> ret;
        }
    }
    <span class="keyword">var</span> checkInput = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"check"</span>);
    alert(checkInput.length);
}
</code></pre><blockquote>
<p>相关资料:<br>  <a href="https://developer.mozilla.org/en-US/docs/Web/API/document/getElementsByTagName" target="_blank" rel="external">getElementsByTagName</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近遇到一个<code>document.getElementsByClassName</code>在IE中的兼容性问题，有兼容性问题的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> checkInput = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"check"</span>);</span><br><span class="line">    alert(checkInput.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IE兼容性" scheme="https://ioliu.cn/tags/IE%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="JavaScript" scheme="https://ioliu.cn/tags/JavaScript/"/>
    
      <category term="getElementsByClassName" scheme="https://ioliu.cn/tags/getElementsByClassName/"/>
    
      <category term="前端" scheme="https://ioliu.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Brackets - 强大免费的开源跨平台Web前端开发工具IDE]]></title>
    <link href="https://ioliu.cn/2014/brackets/"/>
    <id>https://ioliu.cn/2014/brackets/</id>
    <published>2014-05-22T01:10:01.000Z</published>
    <updated>2015-11-16T15:21:24.797Z</updated>
    <content type="html"><![CDATA[<p><img src="//dn-ioliu.qbox.me/brackets.jpg" alt="Brackets"><br>昨天上手了一款叫<a href="http://brackets.io/" title="Brackets 官网" target="_blank" rel="external">Brackets</a>的Web前端编辑器(感谢<a href="http://weibo.com/u/1914616062" title="去他的微博" target="_blank" rel="external">@buyibuyi</a> 的倾情推荐),初步用起来感觉还不错，在这里推荐一下，希望大家也喜欢 ^_^ 。<br><a id="more"></a><br>Brackets 是一个免费、开源且跨平台的 HTML/CSS/JavaScript 前端 WEB 集成开发环境 (IDE工具)。该项目由 Adobe 创建和维护，根据MIT许可证发布，支持 Windows、Linux 以及 OS X 平台。  </p>
<p>Brackets 的特点是简约、优雅、快捷！它没有很多的视图或者面板，也没太多花哨的功能，它的核心目标是减少在开发过程中那些效率低下的重复性工作，例如浏览器刷新，修改元素的样式，搜索功能等等。和 Sublime Text、Everedit 等通用代码编辑器不一样，Brackets 是专门针对 WEB 前端开发而生……  </p>
<p>平台：Windows/Mac OS X/Linux<br>特色：实时开发。在按下ctrl+s的时候，自动刷新HTML页面；在修改css文件的时候，每次按下键盘都会刷新浏览器中的表现，并在光标停留在css选择器中时会标识对应的元素，much like chrome developer tool do，有图有真相。<br><img src="http://7xilig.com1.z0.glb.clouddn.com/test.png" alt="Brackets">  </p>
<p>除此之外，还自带了JSLint工具(JavaScript验证工具)，并且官方还提供了不少插件，比如Emmet(以前叫zen coding)这些插件都可以在<code>扩展管理器</code>中找到。  </p>
<p>当然，强大的Brackets提供了多国语言的支持，如果要修改语言的话，请在导航栏上点击<code>Debug</code>&gt;<code>Select lanuage</code>，然后选择<code>简体中文</code>，重新启动一下软件就好了。<br><img src="//dn-ioliu.qbox.me/select-lanuage.jpg" alt="Select lanuage">   </p>
<p>好了，就这么多，I wish you good mood every day！ </p>
<blockquote>
<p>Brackets官网：[<a href="http://brackets.io" target="_blank" rel="external">http://brackets.io</a>]  </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="//dn-ioliu.qbox.me/brackets.jpg" alt="Brackets"><br>昨天上手了一款叫<a href="http://brackets.io/" title="Brackets 官网">Brackets</a>的Web前端编辑器(感谢<a href="http://weibo.com/u/1914616062" title="去他的微博">@buyibuyi</a> 的倾情推荐),初步用起来感觉还不错，在这里推荐一下，希望大家也喜欢 ^_^ 。<br>]]>
    
    </summary>
    
      <category term="Brackets" scheme="https://ioliu.cn/tags/Brackets/"/>
    
      <category term="编辑器" scheme="https://ioliu.cn/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="工具" scheme="https://ioliu.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Github Pages和Jekyll搭建无限流量的免费Blog]]></title>
    <link href="https://ioliu.cn/2013/helloworld-for-githubpages/"/>
    <id>https://ioliu.cn/2013/helloworld-for-githubpages/</id>
    <published>2013-12-14T04:49:18.000Z</published>
    <updated>2015-11-16T15:21:24.797Z</updated>
    <content type="html"><![CDATA[<p><img src="//dn-ioliu.qbox.me/octojekyll.png" alt="Jekyll">  </p>
<p>对于在Github上搭建免费Blog，我起先一无所知(好吧，知道你们会汗颜)。某一天，好友<code>诺兰德</code>说他为了应付面试(哈哈，请不要在意这些细节)，而加班加点的赶了一个Blog出来，看了他的Blog之后，我很好奇，就让他给我说说是怎么搭建的。他就直接丢了一个教程链接给我，研究了一天，然后就开始了我自己的Blog之旅。好吧，闲话有点多了，下面开始咱们的Blog之旅吧。<br><a id="more"></a></p>
<h3 id="一、Github和Jekyll是什么？">一、Github和Jekyll是什么？</h3><p><a href="http://github.com" title="Github" target="_blank" rel="external">Github</a>:是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。  </p>
<p><a href="https://pages.github.com/" title="Github Pages" target="_blank" rel="external">Github Pages</a>:对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，<code>github Pages可以被认为是用户编写的、托管在github上的静态网页</code>。github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。有意思的是，这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。  </p>
<p><code>注：若要使用Github Pages，请先注册Github账号 。</code> </p>
<p><a href="http://jekyllrb.com/" title="Jekyll" target="_blank" rel="external">Jekyll</a>:一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。  </p>
<h3 id="二、Git工具的安装和简单使用">二、Git工具的安装和简单使用</h3><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。   </p>
<p>下载安装Git：<a href="http://git-scm.com/book/en/Getting-Started-Installing-Git" title="下载Git" target="_blank" rel="external">点击这里下载</a>   </p>
<p>注：安装的时候第三步记得选中<code>Simple context menu(Registry based)</code>，才可以在右键菜单中生成<code>Git GUI here</code>和<code>Git Bash Here</code>选项，如下图所示<br><img src="//dn-ioliu.qbox.me/gitinstall.jpg" alt="gitinstall"><br>安装完成后，找个目录 <code>右键</code>><code>Git Bash Here</code>，打开Git的命令行工具。在里面输入<code>git --help</code>，就能看到命令的使用帮助了。    </p>
<p>附：<a href="http://rogerdudler.github.io/git-guide/index.zh.html" title="Git的简易指南" target="_blank" rel="external">Git的简易指南</a>    </p>
<h3 id="三、搭建博客">三、搭建博客</h3><h4 id="1-新建项目">1.新建项目</h4><p>在你的电脑上，新建一个文件夹，作为博客的根目录，名字任取，假设我们取名为<code>demo</code>：</p>
<blockquote>
<p>$ mkdir demo</p>
</blockquote>
<p>进入文件夹<code>demo</code>，并初始化该文件夹：</p>
<blockquote>
<p>$ cd demo<br>$ git init</p>
</blockquote>
<p>然后创建一个没有父节点的分支<code>gh-pages</code>。因为github规定，只有该分支中的页面，才会生成网页文件：</p>
<blockquote>
<p>$ git checkout –orphan gh-pages</p>
</blockquote>
<h4 id="2-新建配置文件">2.新建配置文件</h4><p>在<code>demo</code>文件夹中新建一个名字为<code>_config.yml</code>的文本文件。它是jekyll的配置文件(具体配置请参考<a href="http://jekyllrb.com/docs/configuration/" title="官方配置" target="_blank" rel="external">官方配置</a>)。我们在其中写入以下内容，<code>注意冒号后面需要加空格</code>：</p>
<blockquote>
<p>baseurl: /demo</p>
</blockquote>
<p>文件夹结构为：    </p>
<blockquote>
<p>/demo<br>&nbsp;&nbsp;|–_config.yml    </p>
</blockquote>
<h4 id="3-新建模板文件">3.新建模板文件</h4><p>在博客根目录下新建一个文件夹，名字为<code>_layouts</code>，用于存放模板文件：</p>
<blockquote>
<p>$ mkdir _layouts</p>
</blockquote>
<p>进入<code>_layouts</code>文件夹，并新建一个<code>default.html</code>文件，作为博客的默认模板。并写入以下内容：<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="doctype">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">page.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    </span><span class="expression">&#123;&#123; <span class="variable">content</span> &#125;&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>Jekyll使用<a href="http://github.com/shopify/liquid/wiki/liquid-for-designers" target="_blank" rel="external">Liquid模板语言</a>，&#123;&#123; page.title &#125;&#125;表示文章标题，&#123;&#123; content &#125;&#125;表示文章内容，更多模板变量请参考<a href="http://jekyllrb.com/docs/variables/" target="_blank" rel="external">官方文档</a>。    </p>
<p>文件夹结构变为：   </p>
<blockquote>
<p>/demo<br>&nbsp;&nbsp;|–_config.yml<br>&nbsp;&nbsp;|–_layouts<br>&nbsp;&nbsp;|&nbsp;&nbsp;|–default.html   </p>
</blockquote>
<h4 id="4-新建文章">4.新建文章</h4><p>回到<code>demo</code>文件夹，新建一个文件夹，名字为<code>_posts</code>，用于存放博客文章：</p>
<blockquote>
<p>$ mkdir _posts</p>
</blockquote>
<p>进入<code>_posts</code>文件夹，新建文本文档，名字假定为2013-12-12-hello-world.html<code>文件名称格式为年-月-日-标题.后缀名</code>，后缀名可以是<code>html</code>或者<code>markdown</code>。</p>
<p>在该文件中，填入以下内容<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---  </span><br><span class="line"><span class="symbol">layout:</span> default  </span><br><span class="line"><span class="symbol">title:</span> 我的第一篇文章  </span><br><span class="line">---  </span><br><span class="line">&lt;h1&gt;<span class="expansion">&#123;&#123; page.title &#125;&#125;</span>&lt;<span class="regexp">/h1&gt;  </span><br><span class="line">&lt;p&gt;Hello,Jekyll!&lt;/p</span>&gt;  </span><br><span class="line">&lt;p&gt;<span class="expansion">&#123;&#123; page.date | date_to_string &#125;&#125;</span>&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>每篇文章的头部，都必须有一个<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="external">YAML文件头</a>，用来设置一些元数据。以<code>---</code>标记开头和结尾，里面每一行设置一种元数据。   </p>
<blockquote>
<p>‘layout: default’ &gt;&gt;&gt; 表示该文章用的模板是_layouts文件夹下的default.html文件。<br>‘title: 我的第一篇文章’ &gt;&gt;&gt; 表示该文章的标题是’我的第一篇文章’。如果不设置这个值，则默认使用文件名中的标题，即’hello-world’。<br>‘page.title’ &gt;&gt;&gt; 就是文件头中设置的title，即’我的第一篇文章’。<br>‘page.date’ &gt;&gt;&gt; 即为文件名的日期，也可以在文件头中重新设置date。<br>‘date_to_string’ &gt;&gt;&gt; 表示将page.date 变量转换成人类可读的格式。   </p>
</blockquote>
<p>文件夹结构变为：   </p>
<blockquote>
<p>/demo<br>&nbsp;&nbsp;|–_config.yml<br>&nbsp;&nbsp;|–_layouts<br>&nbsp;&nbsp;|&nbsp;&nbsp;|–default.html<br>&nbsp;&nbsp;|–_posts<br>&nbsp;&nbsp;|&nbsp;&nbsp;|–2013-12-12-hello-world.html  </p>
</blockquote>
<h4 id="5-新建首页">5.新建首页</h4><p>回到<code>demo</code>文件夹，新建一个文件叫<code>index.html</code>并填入以下内容：<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">---</span><br><span class="line">layout: default</span><br><span class="line">title: 我的Blog</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">page.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">    &#123;% for post in site.posts %&#125;;</span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">post.date</span> | <span class="variable">date</span>_<span class="variable">to</span>_<span class="variable">string</span> &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="expression">&#123;&#123; <span class="variable">post.url</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">post.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>这里的&#123;&#37; for post in site.posts &#37;&#125;表示对所有的文章进行循环遍历，这里要注意的是，<code>Liquid</code>模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于&#123;&#123; site.baseurl &#125;&#125;就是_config.yml中设置的baseurl变量。</p>
<p>文件夹结构变成：</p>
<blockquote>
<p>/demo<br>&nbsp;&nbsp;|–_config.yml<br>&nbsp;&nbsp;|–_layouts<br>&nbsp;&nbsp;|&nbsp;&nbsp;|–default.html<br>&nbsp;&nbsp;|–_posts<br>&nbsp;&nbsp;|&nbsp;&nbsp;|–2013-12-12-hello-world.html<br>&nbsp;&nbsp;|–index.html    </p>
</blockquote>
<h4 id="6-发布博客">6.发布博客</h4><p>先将所有内容加入到本地git库<code>注：当前目录为demo</code>：</p>
<blockquote>
<p>$ git add .<br>$ git commit -m “first commit”  </p>
</blockquote>
<p>前往<a href="http://github.com" target="_blank" rel="external">Github</a>，新建一个名为<code>demo</code>的库，建好后将本地内容推送到Github上你刚刚建的demo库中<code>注：将下面命令中的username换成你自己的username</code>：</p>
<blockquote>
<p>$ git remote add origin <a href="https://github.com/username/demo.git" target="_blank" rel="external">https://github.com/username/demo.git</a><br>$ git push origin gh-pages   </p>
</blockquote>
<p>上传成功之后，等10分钟左右，访问 <code>http://username.github.com/demo/</code> 就可以看到博客已经生成了（将username换成你的用户名）。</p>
<h4 id="7-绑定域名">7.绑定域名</h4><p>如果你不想用<code>http://username.github.com/demo/</code>这个域名，可以换成自己的域名。</p>
<p>具体方法是在repo的根目录下面，新建一个名为<code>CNAME</code>的文本文件，里面写入你要绑定的域名，比如example.com或者xxx.example.com。</p>
<p>如果绑定的是顶级域名，则DNS要新建一条A记录，指向204.232.175.78。如果绑定的是二级域名，则DNS要新建一条CNAME记录，指向username.github.com（请将username换成你的用户名）。此外，别忘了将_config.yml文件中的baseurl改成根目录”/“。</p>
<p>至此，最简单的Blog就算搭建完成了。进一步的完善，请参考Jekyll创始人的<a href="http://github.com/mojombo/tpw" target="_blank" rel="external">示例库</a>，以及其他用Jekyll搭建的<a href="http://github.com/jekyll/jekyll/wiki/Sites" target="_blank" rel="external">Blog</a>。</p>
<p>(完)</p>
<blockquote>
<p>特别感谢：<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" title="阮一峰：搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门" target="_blank" rel="external">阮一峰老师</a>     </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="//dn-ioliu.qbox.me/octojekyll.png" alt="Jekyll">  </p>
<p>对于在Github上搭建免费Blog，我起先一无所知(好吧，知道你们会汗颜)。某一天，好友<code>诺兰德</code>说他为了应付面试(哈哈，请不要在意这些细节)，而加班加点的赶了一个Blog出来，看了他的Blog之后，我很好奇，就让他给我说说是怎么搭建的。他就直接丢了一个教程链接给我，研究了一天，然后就开始了我自己的Blog之旅。好吧，闲话有点多了，下面开始咱们的Blog之旅吧。<br>]]>
    
    </summary>
    
      <category term="GitHub Pages" scheme="https://ioliu.cn/tags/GitHub-Pages/"/>
    
      <category term="Jekyll" scheme="https://ioliu.cn/tags/Jekyll/"/>
    
      <category term="免费博客" scheme="https://ioliu.cn/tags/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Jekyll" scheme="https://ioliu.cn/categories/Jekyll/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text 的简单安装与详细配置]]></title>
    <link href="https://ioliu.cn/2013/preferences-sublime/"/>
    <id>https://ioliu.cn/2013/preferences-sublime/</id>
    <published>2013-12-12T03:10:01.000Z</published>
    <updated>2015-11-16T15:21:24.813Z</updated>
    <content type="html"><![CDATA[<p><img src="//dn-ioliu.qbox.me/iosublime.png" alt="SublimeText"></p>
<p>最近迷上了一款文本编辑器叫<code>Sublime Text</code>，<a href="http://www.sublimetext.com/" title="Sublime Text 官网" target="_blank" rel="external">官网</a>，给人的第一感觉是轻，而且里面的各种自定义配置用起来真的是如鱼得水。写这篇文章主要是防止以后到处寻找而做个备份。<br><a id="more"></a></p>
<h3 id="一、Sublime_Text的下载安装">一、<code>Sublime Text</code>的下载安装</h3><p>进入<code>Sublime Text</code>的<a href="http://www.sublimetext.com/" title="Sublime Text 官网" target="_blank" rel="external">官网</a>，下载<code>Sublime Text</code>，有2和3版本，请根据自己爱好进行下载安装。</p>
<h3 id="二、Package_Control的安装">二、<code>Package Control</code>的安装</h3><p>首先打开<code>Console</code>&gt;&gt;&gt;快捷键：<code>Ctrl+Esc下面的那个键</code>，输入下面的代码，然后回车(请注意软件自身的版本)<br>如果是<code>Sublime Text3</code>，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.<span class="keyword">join</span>(ipp, pf), <span class="string">'wb'</span>).<span class="keyword">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure></p>
<p>如果是<code>Sublime Text 2</code>，则代码如下：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.<span class="keyword">exists</span>(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class="keyword">open</span>( os.path.<span class="keyword">join</span>( ipp, pf), <span class="string">'wb'</span> ).<span class="keyword">write</span>( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).<span class="keyword">read</span>()); <span class="keyword">print</span>( <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure></p>
<p>重启软件即可。</p>
<h3 id="三、插件的安装与卸载">三、插件的安装与卸载</h3><h4 id="1-_插件的安装：">1. 插件的安装：</h4><p>重启软件后，快捷键<code>Ctrl+Shift+P</code>就可以打开<code>Package Control</code>了，输入关键字<code>Install Package</code> + <code>回车</code>，会进入插件候选安装界面，输入你要安装的插件名称，如<code>Emmet</code>，找到后，回车安装。</p>
<h4 id="2-_插件的卸载：">2. 插件的卸载：</h4><p>打开<code>Package Control</code>，输入关键字<code>Remove Package</code>+<code>回车</code>，会进入插件候选删除界面，输入你要卸载的插件名称，如<code>Emmet</code>，找到后，回车卸载。</p>
<h4 id="3-_推荐插件:">3. 推荐插件:</h4><ol>
<li><a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="external">Git</a></li>
<li><a href="https://github.com/jisaacks/GitGutter" target="_blank" rel="external">GitGutter</a></li>
<li><a href="http://emmet.io/" target="_blank" rel="external">Emmet</a></li>
<li><a href="https://github.com/alienhard/SublimeAllAutocomplete" target="_blank" rel="external">AllAutoComplete</a></li>
<li><a href="http://weslly.github.io/ColorPicker/" target="_blank" rel="external">ColorPicker</a></li>
<li><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="external">MarkdownPreview</a></li>
<li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="external">DocBlockr</a></li>
<li><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel" target="_blank" rel="external">SublimeCodeIntel</a></li>
<li><a href="https://github.com/facelessuser/BracketHighlighter" target="_blank" rel="external">BracketHighlighter</a></li>
<li><a href="https://github.com/titoBouzout/SideBarFolders" target="_blank" rel="external">SideBarFolders</a></li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="external">SideBarEnhancements</a></li>
</ol>
<h4 id="4-_推荐字体:">4. 推荐字体:</h4><blockquote>
<p><a href="http://7xilig.com1.z0.glb.clouddn.com/YaHei.Consolas.1.11b.rar" target="_blank" rel="external">YaHei.Consolas</a>   </p>
</blockquote>
<h4 id="5-_推荐主题">5. 推荐主题</h4><blockquote>
<p>Centurion<br>Afterglow </p>
</blockquote>
<h3 id="四、Preferences-sublime文件的详细配置">四、Preferences.sublime文件的详细配置</h3><p>接下来就是&gt;&gt;&gt;菜单栏<code>Preferences&gt;Setting User</code>打开<code>Preferences.sublime</code>配置文件，去搜索了下，具体配置如下:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="regexp">//</span>主题文件的位置</span><br><span class="line">    <span class="string">"theme"</span><span class="symbol">:<span class="string">"Centurion.sublime-theme"</span></span>,</span><br><span class="line">    <span class="string">"color_scheme"</span><span class="symbol">:<span class="string">"Packages/Color Scheme - Default/Monokai.tmTheme"</span></span>,</span><br><span class="line">    <span class="regexp">//</span><span class="string">"theme"</span><span class="symbol">:</span> <span class="string">"Afterglow-orange.sublime-theme"</span>,</span><br><span class="line">    <span class="regexp">//</span><span class="string">"color_scheme"</span><span class="symbol">:</span> <span class="string">"Packages/Theme - Afterglow/Afterglow.tmTheme"</span>,</span><br><span class="line">    <span class="regexp">//</span>字体</span><br><span class="line">    <span class="string">"font_face"</span><span class="symbol">:<span class="string">"Consolas"</span></span>,</span><br><span class="line">    <span class="regexp">//</span><span class="string">"font_face"</span><span class="symbol">:</span> <span class="string">"YaHei Consolas Hybrid"</span>,</span><br><span class="line">    <span class="regexp">//</span>字体大小</span><br><span class="line">    <span class="string">"font_size"</span><span class="symbol">:</span><span class="number">11.0</span>,</span><br><span class="line">    <span class="string">"ignored_packages"</span><span class="symbol">:</span></span><br><span class="line">    [</span><br><span class="line">        <span class="string">"Vintage"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="regexp">//</span>每行code相对于上一行代码的上边距</span><br><span class="line">    <span class="string">"line_padding_top"</span><span class="symbol">:</span><span class="number">2</span>,</span><br><span class="line">    <span class="regexp">//tab</span>键缩进用空格代替</span><br><span class="line">    <span class="string">"translate_tabs_to_spaces"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>自动换行</span><br><span class="line">    <span class="string">"word_warp"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//tab</span>键制表符宽度</span><br><span class="line">    <span class="string">"tab_size"</span><span class="symbol">:</span><span class="number">4</span>,</span><br><span class="line">    <span class="regexp">//</span>是否显示行号</span><br><span class="line">    <span class="string">"line_number"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>是否显示代码折叠按钮</span><br><span class="line">    <span class="string">"fold_buttons"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>不管鼠标在不在行号边栏，代码折叠按钮一直显示</span><br><span class="line">    <span class="string">"fade_fold_buttons"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>按回车时，自动与制表位对其</span><br><span class="line">    <span class="string">"auto_indent"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>自动匹配引号，括号等</span><br><span class="line">    <span class="string">"auto_match_enabled"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>突出显示当前光标所在行</span><br><span class="line">    <span class="string">"highlight_line"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>设置光标闪动方式</span><br><span class="line">    <span class="string">"caret_style"</span><span class="symbol">:<span class="string">"smooth"</span></span>,</span><br><span class="line">    <span class="regexp">//</span>是否特殊显示当前光标所在的括号、代码头尾闭合标记</span><br><span class="line">    <span class="string">"match_brackets"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>切换到其他文件标签或点击其他非本软件区域，文件自动保存</span><br><span class="line">    <span class="string">"save_on_focus_last"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>代码提示</span><br><span class="line">    <span class="string">"auto_complete"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>设置为<span class="keyword">true</span>时，按<span class="constant">Tab会</span>根据前后环境进行代码自动匹配补全</span><br><span class="line">    <span class="string">"tab_completion"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>选中的文本按<span class="constant">Ctrl+F时</span>，自动复制到查找面板的文本框里</span><br><span class="line">    <span class="string">"find_selected_text"</span><span class="symbol">:true</span>,</span><br><span class="line">    <span class="regexp">//</span>防止<span class="constant">SublimeText自</span>动检查更新</span><br><span class="line">    <span class="string">"update_check"</span><span class="symbol">:false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>^_^/，好了，完工，具体使用情况还是要依靠自己的喜好而来，这里的配置并不唯一，请不要在意这些细节~。</p>
<blockquote>
<p>这里留下**工具，请支持正版。<a href="http://pan.baidu.com/s/128SAL" title="百度网盘下载" target="_blank" rel="external">sublime.text.3.x64.patch.by.荒野无灯</a>，**工具具体使用方法，请自行搜索。     </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3083</span></span><br><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">Andrew Weber</span><br><span class="line">Single User License</span><br><span class="line">EA7E-<span class="number">855605</span></span><br><span class="line"><span class="number">813</span>A03DD <span class="number">5E4</span>AD9E6 <span class="number">6</span>C0EEB94 BC99798F</span><br><span class="line"><span class="number">942194</span>A6 <span class="number">02396E98</span> E62C9979 <span class="number">4</span>BB979FE</span><br><span class="line"><span class="number">91424</span>C9D A45400BF F6747D88 <span class="number">2F</span>B88078</span><br><span class="line"><span class="number">90F</span>5CC94 <span class="number">1</span>CDC92DC <span class="number">8457107</span>A F151657B</span><br><span class="line"><span class="number">1</span>D22E383 A997F016 <span class="number">42397640</span> <span class="number">33F</span>41CFC</span><br><span class="line">E1D0AE85 A0BBD039 <span class="number">0E9</span>C8D55 E1B89D5D</span><br><span class="line"><span class="number">5</span>CDB7036 E56DE1C0 EFCC0840 <span class="number">650</span>CD3A6</span><br><span class="line">B98FC99C <span class="number">8F</span>AC73EE D2B95564 DF450523</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SublimeText官网:[<a href="http://www.sublimetext.com/" target="_blank" rel="external">http://www.sublimetext.com/</a>] </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="//dn-ioliu.qbox.me/iosublime.png" alt="SublimeText"></p>
<p>最近迷上了一款文本编辑器叫<code>Sublime Text</code>，<a href="http://www.sublimetext.com/" title="Sublime Text 官网">官网</a>，给人的第一感觉是轻，而且里面的各种自定义配置用起来真的是如鱼得水。写这篇文章主要是防止以后到处寻找而做个备份。<br>]]>
    
    </summary>
    
      <category term="Sublime Text" scheme="https://ioliu.cn/tags/Sublime-Text/"/>
    
      <category term="插件" scheme="https://ioliu.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="编辑器" scheme="https://ioliu.cn/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="配置" scheme="https://ioliu.cn/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="工具" scheme="https://ioliu.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
